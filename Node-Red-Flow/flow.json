[
    {
        "id": "2e3b78ee499442d8",
        "type": "comment",
        "z": "044b8a5011376a6a",
        "name": "Reddit Integration",
        "info": "",
        "x": 170,
        "y": 60,
        "wires": []
    },
    {
        "id": "94c5bce69b84c621",
        "type": "comment",
        "z": "044b8a5011376a6a",
        "name": "Youtube Integration",
        "info": "",
        "x": 170,
        "y": 360,
        "wires": []
    },
    {
        "id": "f6ea77c6b842fdf3",
        "type": "inject",
        "z": "044b8a5011376a6a",
        "name": "Fetch Reddit every 10 min",
        "props": [],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.5,
        "topic": "",
        "x": 220,
        "y": 140,
        "wires": [
            [
                "88d330f4496234a6"
            ]
        ]
    },
    {
        "id": "88d330f4496234a6",
        "type": "http request",
        "z": "044b8a5011376a6a",
        "name": "GET Reddit Posts",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://www.reddit.com/search.json?q=coding&sort=top&t=day&limit=50",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 450,
        "y": 140,
        "wires": [
            [
                "caf22b030dadcc41"
            ]
        ]
    },
    {
        "id": "caf22b030dadcc41",
        "type": "json",
        "z": "044b8a5011376a6a",
        "name": "Parse JSON",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 640,
        "y": 140,
        "wires": [
            [
                "f6df49a4451841c4"
            ]
        ]
    },
    {
        "id": "537af8e9b8337834",
        "type": "debug",
        "z": "044b8a5011376a6a",
        "name": "Reddit Data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1040,
        "y": 140,
        "wires": []
    },
    {
        "id": "3fcc6c26cbb6218c",
        "type": "http in",
        "z": "044b8a5011376a6a",
        "name": "Reddit Feed API",
        "url": "/api/reddit/feed",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 240,
        "wires": [
            [
                "4cb4dd1aa84a199d"
            ]
        ]
    },
    {
        "id": "4cb4dd1aa84a199d",
        "type": "function",
        "z": "044b8a5011376a6a",
        "name": "Load from Flow",
        "func": "let data = flow.get(\"reddit_feed\") || [];\nmsg.payload = data;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 240,
        "wires": [
            [
                "1ebd095a3250c80e"
            ]
        ]
    },
    {
        "id": "1ebd095a3250c80e",
        "type": "http response",
        "z": "044b8a5011376a6a",
        "name": "Send Reddit Feed",
        "statusCode": "",
        "headers": {},
        "x": 630,
        "y": 240,
        "wires": []
    },
    {
        "id": "9f4313d62a4b6b22",
        "type": "inject",
        "z": "044b8a5011376a6a",
        "name": "Fetch YouTube every 10 min",
        "props": [],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.5,
        "topic": "",
        "x": 230,
        "y": 440,
        "wires": [
            [
                "0ee8160c6ed1e543"
            ]
        ]
    },
    {
        "id": "0ee8160c6ed1e543",
        "type": "function",
        "z": "044b8a5011376a6a",
        "name": "Build YouTube API URL",
        "func": "let API_KEY = \"AIzaSyCETelMGWetAxCFFdOI5CM76JYIRnOVS50\";\nlet maxResults = 50;\nlet regionCode = \"IN\";\nlet query = \"coding\"; \n\nmsg.url = `https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=${maxResults}&regionCode=${regionCode}&q=${encodeURIComponent(query)}&type=video&key=${API_KEY}`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 440,
        "wires": [
            [
                "b45790f4d8c6114d"
            ]
        ]
    },
    {
        "id": "b45790f4d8c6114d",
        "type": "http request",
        "z": "044b8a5011376a6a",
        "name": "YouTube API Call",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 790,
        "y": 440,
        "wires": [
            [
                "25dd55428a8dcf15"
            ]
        ]
    },
    {
        "id": "25dd55428a8dcf15",
        "type": "function",
        "z": "044b8a5011376a6a",
        "name": "Format YouTube Response",
        "func": "let items = msg.payload.items || [];\n\nlet cleaned = items.map(video => ({\n    platform: \"YouTube\",\n    text: video.snippet.title,\n    user: video.snippet.channelTitle,\n    time: video.snippet.publishedAt,\n    image: video.snippet.thumbnails?.medium?.url || \"\",\n    videoId: video.id.videoId\n}));\n\nflow.set(\"youtube_feed\", cleaned);\nmsg.payload = cleaned;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 440,
        "wires": [
            [
                "ca9971c87a995d69"
            ]
        ]
    },
    {
        "id": "ca9971c87a995d69",
        "type": "debug",
        "z": "044b8a5011376a6a",
        "name": "YouTube Data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 440,
        "wires": []
    },
    {
        "id": "ead8c54c8252d018",
        "type": "http in",
        "z": "044b8a5011376a6a",
        "name": "Serve YouTube Feed",
        "url": "/api/youtube/feed",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 540,
        "wires": [
            [
                "0e4a27ce8a4f77e9"
            ]
        ]
    },
    {
        "id": "0e4a27ce8a4f77e9",
        "type": "function",
        "z": "044b8a5011376a6a",
        "name": "Load from Flow",
        "func": "let data = flow.get(\"youtube_feed\") || [];\nmsg.payload = data;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 540,
        "wires": [
            [
                "415046b2180230ab"
            ]
        ]
    },
    {
        "id": "415046b2180230ab",
        "type": "http response",
        "z": "044b8a5011376a6a",
        "name": "Response",
        "statusCode": "",
        "headers": {},
        "x": 640,
        "y": 540,
        "wires": []
    },
    {
        "id": "f6df49a4451841c4",
        "type": "function",
        "z": "044b8a5011376a6a",
        "name": "Format Reddit Data",
        "func": "let posts = msg.payload.data.children;\nlet cleaned = posts.map(post => ({\n    platform: \"Reddit\",\n    text: post.data.title,\n    user: post.data.author,\n    time: new Date(post.data.created_utc * 1000).toISOString(),\n    url: `https://www.reddit.com${post.data.permalink}`,\n    content: post.data.selftext || '',\n    comments: post.data.num_comments || 0,\n    score: post.data.score || 0\n}));\nflow.set(\"reddit_feed\", cleaned);\nmsg.payload = cleaned;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 140,
        "wires": [
            [
                "537af8e9b8337834"
            ]
        ]
    }
]